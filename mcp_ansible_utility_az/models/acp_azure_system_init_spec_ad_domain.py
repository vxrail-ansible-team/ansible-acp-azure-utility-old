# coding: utf-8

"""
    Dell APEX Cloud Platform for Microsoft Azure REST API

    Dell APEX Cloud Platform REST API provides a programmatic interface for performing administrative tasks on Dell APEX Cloud Platform for Microsoft Azure. The data is available in JSON format.  # noqa: E501

    OpenAPI spec version: 1.0.000
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ACPAzureSystemInitSpecAdDomain(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'naming_prefix': 'str',
        'domain_name': 'str',
        'ou_path': 'str',
        'accounts': 'list[TypedAccountSpec]'
    }

    attribute_map = {
        'naming_prefix': 'naming_prefix',
        'domain_name': 'domain_name',
        'ou_path': 'ou_path',
        'accounts': 'accounts'
    }

    def __init__(self, naming_prefix=None, domain_name=None, ou_path=None, accounts=None):  # noqa: E501
        """ACPAzureSystemInitSpecAdDomain - a model defined in Swagger"""  # noqa: E501
        self._naming_prefix = None
        self._domain_name = None
        self._ou_path = None
        self._accounts = None
        self.discriminator = None
        if naming_prefix is not None:
            self.naming_prefix = naming_prefix
        if domain_name is not None:
            self.domain_name = domain_name
        if ou_path is not None:
            self.ou_path = ou_path
        if accounts is not None:
            self.accounts = accounts

    @property
    def naming_prefix(self):
        """Gets the naming_prefix of this ACPAzureSystemInitSpecAdDomain.  # noqa: E501

        The prefix used for all Active Directory objects created for the APEX Cloud Platform for Microsoft Azure cluster deployment.  # noqa: E501

        :return: The naming_prefix of this ACPAzureSystemInitSpecAdDomain.  # noqa: E501
        :rtype: str
        """
        return self._naming_prefix

    @naming_prefix.setter
    def naming_prefix(self, naming_prefix):
        """Sets the naming_prefix of this ACPAzureSystemInitSpecAdDomain.

        The prefix used for all Active Directory objects created for the APEX Cloud Platform for Microsoft Azure cluster deployment.  # noqa: E501

        :param naming_prefix: The naming_prefix of this ACPAzureSystemInitSpecAdDomain.  # noqa: E501
        :type: str
        """

        self._naming_prefix = naming_prefix

    @property
    def domain_name(self):
        """Gets the domain_name of this ACPAzureSystemInitSpecAdDomain.  # noqa: E501

        The Fully Qualified Domain Name (FQDN) of the Active Directory domain.  # noqa: E501

        :return: The domain_name of this ACPAzureSystemInitSpecAdDomain.  # noqa: E501
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this ACPAzureSystemInitSpecAdDomain.

        The Fully Qualified Domain Name (FQDN) of the Active Directory domain.  # noqa: E501

        :param domain_name: The domain_name of this ACPAzureSystemInitSpecAdDomain.  # noqa: E501
        :type: str
        """

        self._domain_name = domain_name

    @property
    def ou_path(self):
        """Gets the ou_path of this ACPAzureSystemInitSpecAdDomain.  # noqa: E501

        A new Organizational Unit (OU) to store all the objects for the APEX Cloud Platform for Microsoft Azure cluster deployment.  # noqa: E501

        :return: The ou_path of this ACPAzureSystemInitSpecAdDomain.  # noqa: E501
        :rtype: str
        """
        return self._ou_path

    @ou_path.setter
    def ou_path(self, ou_path):
        """Sets the ou_path of this ACPAzureSystemInitSpecAdDomain.

        A new Organizational Unit (OU) to store all the objects for the APEX Cloud Platform for Microsoft Azure cluster deployment.  # noqa: E501

        :param ou_path: The ou_path of this ACPAzureSystemInitSpecAdDomain.  # noqa: E501
        :type: str
        """

        self._ou_path = ou_path

    @property
    def accounts(self):
        """Gets the accounts of this ACPAzureSystemInitSpecAdDomain.  # noqa: E501

        Active Directory domain account for cluster management.  # noqa: E501

        :return: The accounts of this ACPAzureSystemInitSpecAdDomain.  # noqa: E501
        :rtype: list[TypedAccountSpec]
        """
        return self._accounts

    @accounts.setter
    def accounts(self, accounts):
        """Sets the accounts of this ACPAzureSystemInitSpecAdDomain.

        Active Directory domain account for cluster management.  # noqa: E501

        :param accounts: The accounts of this ACPAzureSystemInitSpecAdDomain.  # noqa: E501
        :type: list[TypedAccountSpec]
        """

        self._accounts = accounts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ACPAzureSystemInitSpecAdDomain, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ACPAzureSystemInitSpecAdDomain):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
