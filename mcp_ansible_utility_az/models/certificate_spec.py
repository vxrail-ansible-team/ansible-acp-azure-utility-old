# coding: utf-8

"""
    Dell APEX Cloud Platform for Microsoft Azure REST API

    Dell APEX Cloud Platform REST API provides a programmatic interface for performing administrative tasks on Dell APEX Cloud Platform for Microsoft Azure. The data is available in JSON format.  # noqa: E501

    OpenAPI spec version: 1.0.000
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CertificateSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cert_type': 'str',
        'cert': 'str'
    }

    attribute_map = {
        'cert_type': 'cert_type',
        'cert': 'cert'
    }

    def __init__(self, cert_type=None, cert=None):  # noqa: E501
        """CertificateSpec - a model defined in Swagger"""  # noqa: E501
        self._cert_type = None
        self._cert = None
        self.discriminator = None
        self.cert_type = cert_type
        self.cert = cert

    @property
    def cert_type(self):
        """Gets the cert_type of this CertificateSpec.  # noqa: E501

        Certificated type. The root CA certificate only or root CA certificate with intermediate CA certificates. The Supported values are ROOT and INTERMEDIATE.  # noqa: E501

        :return: The cert_type of this CertificateSpec.  # noqa: E501
        :rtype: str
        """
        return self._cert_type

    @cert_type.setter
    def cert_type(self, cert_type):
        """Sets the cert_type of this CertificateSpec.

        Certificated type. The root CA certificate only or root CA certificate with intermediate CA certificates. The Supported values are ROOT and INTERMEDIATE.  # noqa: E501

        :param cert_type: The cert_type of this CertificateSpec.  # noqa: E501
        :type: str
        """
        if cert_type is None:
            raise ValueError("Invalid value for `cert_type`, must not be `None`")  # noqa: E501
        allowed_values = ["ROOT", "INTERMEDIATE"]  # noqa: E501
        if cert_type not in allowed_values:
            raise ValueError(
                "Invalid value for `cert_type` ({0}), must be one of {1}"  # noqa: E501
                .format(cert_type, allowed_values)
            )

        self._cert_type = cert_type

    @property
    def cert(self):
        """Gets the cert of this CertificateSpec.  # noqa: E501

        Content of certificate in PEM format, each line should be followed by an escape character \"\\n\".  # noqa: E501

        :return: The cert of this CertificateSpec.  # noqa: E501
        :rtype: str
        """
        return self._cert

    @cert.setter
    def cert(self, cert):
        """Sets the cert of this CertificateSpec.

        Content of certificate in PEM format, each line should be followed by an escape character \"\\n\".  # noqa: E501

        :param cert: The cert of this CertificateSpec.  # noqa: E501
        :type: str
        """
        if cert is None:
            raise ValueError("Invalid value for `cert`, must not be `None`")  # noqa: E501

        self._cert = cert

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CertificateSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CertificateSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
