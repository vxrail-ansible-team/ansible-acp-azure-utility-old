# coding: utf-8

"""
    Dell APEX Cloud Platform for Microsoft Azure REST API

    Dell APEX Cloud Platform REST API provides a programmatic interface for performing administrative tasks on Dell APEX Cloud Platform for Microsoft Azure. The data is available in JSON format.  # noqa: E501

    OpenAPI spec version: 1.0.000
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DiscoveredNodeInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'serial_number': 'str',
        'primary': 'bool',
        'model': 'str',
        'hostname': 'str',
        'ipv6': 'str',
        'bootstrap_os_version': 'str'
    }

    attribute_map = {
        'serial_number': 'serial_number',
        'primary': 'primary',
        'model': 'model',
        'hostname': 'hostname',
        'ipv6': 'ipv6',
        'bootstrap_os_version': 'bootstrap_os_version'
    }

    def __init__(self, serial_number=None, primary=None, model=None, hostname=None, ipv6=None, bootstrap_os_version=None):  # noqa: E501
        """DiscoveredNodeInfo - a model defined in Swagger"""  # noqa: E501
        self._serial_number = None
        self._primary = None
        self._model = None
        self._hostname = None
        self._ipv6 = None
        self._bootstrap_os_version = None
        self.discriminator = None
        self.serial_number = serial_number
        self.primary = primary
        self.model = model
        self.hostname = hostname
        self.ipv6 = ipv6
        self.bootstrap_os_version = bootstrap_os_version

    @property
    def serial_number(self):
        """Gets the serial_number of this DiscoveredNodeInfo.  # noqa: E501

        The service tag of the node  # noqa: E501

        :return: The serial_number of this DiscoveredNodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this DiscoveredNodeInfo.

        The service tag of the node  # noqa: E501

        :param serial_number: The serial_number of this DiscoveredNodeInfo.  # noqa: E501
        :type: str
        """
        if serial_number is None:
            raise ValueError("Invalid value for `serial_number`, must not be `None`")  # noqa: E501

        self._serial_number = serial_number

    @property
    def primary(self):
        """Gets the primary of this DiscoveredNodeInfo.  # noqa: E501

        Indicate whether the host is primary or not.  # noqa: E501

        :return: The primary of this DiscoveredNodeInfo.  # noqa: E501
        :rtype: bool
        """
        return self._primary

    @primary.setter
    def primary(self, primary):
        """Sets the primary of this DiscoveredNodeInfo.

        Indicate whether the host is primary or not.  # noqa: E501

        :param primary: The primary of this DiscoveredNodeInfo.  # noqa: E501
        :type: bool
        """
        if primary is None:
            raise ValueError("Invalid value for `primary`, must not be `None`")  # noqa: E501

        self._primary = primary

    @property
    def model(self):
        """Gets the model of this DiscoveredNodeInfo.  # noqa: E501

        The model of the host.  # noqa: E501

        :return: The model of this DiscoveredNodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this DiscoveredNodeInfo.

        The model of the host.  # noqa: E501

        :param model: The model of this DiscoveredNodeInfo.  # noqa: E501
        :type: str
        """
        if model is None:
            raise ValueError("Invalid value for `model`, must not be `None`")  # noqa: E501

        self._model = model

    @property
    def hostname(self):
        """Gets the hostname of this DiscoveredNodeInfo.  # noqa: E501

        The hostname of the host.  # noqa: E501

        :return: The hostname of this DiscoveredNodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this DiscoveredNodeInfo.

        The hostname of the host.  # noqa: E501

        :param hostname: The hostname of this DiscoveredNodeInfo.  # noqa: E501
        :type: str
        """
        if hostname is None:
            raise ValueError("Invalid value for `hostname`, must not be `None`")  # noqa: E501

        self._hostname = hostname

    @property
    def ipv6(self):
        """Gets the ipv6 of this DiscoveredNodeInfo.  # noqa: E501

        The IPv6 address of the host.  # noqa: E501

        :return: The ipv6 of this DiscoveredNodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._ipv6

    @ipv6.setter
    def ipv6(self, ipv6):
        """Sets the ipv6 of this DiscoveredNodeInfo.

        The IPv6 address of the host.  # noqa: E501

        :param ipv6: The ipv6 of this DiscoveredNodeInfo.  # noqa: E501
        :type: str
        """
        if ipv6 is None:
            raise ValueError("Invalid value for `ipv6`, must not be `None`")  # noqa: E501

        self._ipv6 = ipv6

    @property
    def bootstrap_os_version(self):
        """Gets the bootstrap_os_version of this DiscoveredNodeInfo.  # noqa: E501

        The version of bootstrap OS installed on the host.  # noqa: E501

        :return: The bootstrap_os_version of this DiscoveredNodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._bootstrap_os_version

    @bootstrap_os_version.setter
    def bootstrap_os_version(self, bootstrap_os_version):
        """Sets the bootstrap_os_version of this DiscoveredNodeInfo.

        The version of bootstrap OS installed on the host.  # noqa: E501

        :param bootstrap_os_version: The bootstrap_os_version of this DiscoveredNodeInfo.  # noqa: E501
        :type: str
        """
        if bootstrap_os_version is None:
            raise ValueError("Invalid value for `bootstrap_os_version`, must not be `None`")  # noqa: E501

        self._bootstrap_os_version = bootstrap_os_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DiscoveredNodeInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DiscoveredNodeInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
