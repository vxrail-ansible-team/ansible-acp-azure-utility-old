# coding: utf-8

"""
    Dell APEX Cloud Platform for Microsoft Azure REST API

    Dell APEX Cloud Platform REST API provides a programmatic interface for performing administrative tasks on Dell APEX Cloud Platform for Microsoft Azure. The data is available in JSON format.  # noqa: E501

    OpenAPI spec version: 1.0.000
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ACPAzureSystemInitSpecNetworkHostNetwork(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'intents': 'list[IntentSpec]',
        'storage_networks': 'list[StorageNetworkSpec]',
        'storage_switch_topology': 'str'
    }

    attribute_map = {
        'intents': 'intents',
        'storage_networks': 'storage_networks',
        'storage_switch_topology': 'storage_switch_topology'
    }

    def __init__(self, intents=None, storage_networks=None, storage_switch_topology=None):  # noqa: E501
        """ACPAzureSystemInitSpecNetworkHostNetwork - a model defined in Swagger"""  # noqa: E501
        self._intents = None
        self._storage_networks = None
        self._storage_switch_topology = None
        self.discriminator = None
        if intents is not None:
            self.intents = intents
        if storage_networks is not None:
            self.storage_networks = storage_networks
        if storage_switch_topology is not None:
            self.storage_switch_topology = storage_switch_topology

    @property
    def intents(self):
        """Gets the intents of this ACPAzureSystemInitSpecNetworkHostNetwork.  # noqa: E501


        :return: The intents of this ACPAzureSystemInitSpecNetworkHostNetwork.  # noqa: E501
        :rtype: list[IntentSpec]
        """
        return self._intents

    @intents.setter
    def intents(self, intents):
        """Sets the intents of this ACPAzureSystemInitSpecNetworkHostNetwork.


        :param intents: The intents of this ACPAzureSystemInitSpecNetworkHostNetwork.  # noqa: E501
        :type: list[IntentSpec]
        """

        self._intents = intents

    @property
    def storage_networks(self):
        """Gets the storage_networks of this ACPAzureSystemInitSpecNetworkHostNetwork.  # noqa: E501


        :return: The storage_networks of this ACPAzureSystemInitSpecNetworkHostNetwork.  # noqa: E501
        :rtype: list[StorageNetworkSpec]
        """
        return self._storage_networks

    @storage_networks.setter
    def storage_networks(self, storage_networks):
        """Sets the storage_networks of this ACPAzureSystemInitSpecNetworkHostNetwork.


        :param storage_networks: The storage_networks of this ACPAzureSystemInitSpecNetworkHostNetwork.  # noqa: E501
        :type: list[StorageNetworkSpec]
        """

        self._storage_networks = storage_networks

    @property
    def storage_switch_topology(self):
        """Gets the storage_switch_topology of this ACPAzureSystemInitSpecNetworkHostNetwork.  # noqa: E501

        Defines if the connection between the storage adapters and nodes is switched or switchless.  # noqa: E501

        :return: The storage_switch_topology of this ACPAzureSystemInitSpecNetworkHostNetwork.  # noqa: E501
        :rtype: str
        """
        return self._storage_switch_topology

    @storage_switch_topology.setter
    def storage_switch_topology(self, storage_switch_topology):
        """Sets the storage_switch_topology of this ACPAzureSystemInitSpecNetworkHostNetwork.

        Defines if the connection between the storage adapters and nodes is switched or switchless.  # noqa: E501

        :param storage_switch_topology: The storage_switch_topology of this ACPAzureSystemInitSpecNetworkHostNetwork.  # noqa: E501
        :type: str
        """
        allowed_values = ["SWITCHED", "SWITCHLESS"]  # noqa: E501
        if storage_switch_topology not in allowed_values:
            raise ValueError(
                "Invalid value for `storage_switch_topology` ({0}), must be one of {1}"  # noqa: E501
                .format(storage_switch_topology, allowed_values)
            )

        self._storage_switch_topology = storage_switch_topology

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ACPAzureSystemInitSpecNetworkHostNetwork, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ACPAzureSystemInitSpecNetworkHostNetwork):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
