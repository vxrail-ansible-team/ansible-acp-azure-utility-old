# coding: utf-8

"""
    Dell APEX Cloud Platform for Microsoft Azure REST API

    Dell APEX Cloud Platform REST API provides a programmatic interface for performing administrative tasks on Dell APEX Cloud Platform for Microsoft Azure. The data is available in JSON format.  # noqa: E501

    OpenAPI spec version: 1.0.000
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IntentSpecAdapterPropertyOverrides(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'jumbo_packet': 'str',
        'network_direct': 'str',
        'network_direct_technology': 'str'
    }

    attribute_map = {
        'jumbo_packet': 'jumbo_packet',
        'network_direct': 'network_direct',
        'network_direct_technology': 'network_direct_technology'
    }

    def __init__(self, jumbo_packet=None, network_direct=None, network_direct_technology=None):  # noqa: E501
        """IntentSpecAdapterPropertyOverrides - a model defined in Swagger"""  # noqa: E501
        self._jumbo_packet = None
        self._network_direct = None
        self._network_direct_technology = None
        self.discriminator = None
        if jumbo_packet is not None:
            self.jumbo_packet = jumbo_packet
        if network_direct is not None:
            self.network_direct = network_direct
        if network_direct_technology is not None:
            self.network_direct_technology = network_direct_technology

    @property
    def jumbo_packet(self):
        """Gets the jumbo_packet of this IntentSpecAdapterPropertyOverrides.  # noqa: E501

        Jumbo Packets allow a single frame going across the network to carry a much bigger payload than normal. Supported values are 1514, 4088 and 9014.  # noqa: E501

        :return: The jumbo_packet of this IntentSpecAdapterPropertyOverrides.  # noqa: E501
        :rtype: str
        """
        return self._jumbo_packet

    @jumbo_packet.setter
    def jumbo_packet(self, jumbo_packet):
        """Sets the jumbo_packet of this IntentSpecAdapterPropertyOverrides.

        Jumbo Packets allow a single frame going across the network to carry a much bigger payload than normal. Supported values are 1514, 4088 and 9014.  # noqa: E501

        :param jumbo_packet: The jumbo_packet of this IntentSpecAdapterPropertyOverrides.  # noqa: E501
        :type: str
        """
        allowed_values = ["1514", "4088", "9014"]  # noqa: E501
        if jumbo_packet not in allowed_values:
            raise ValueError(
                "Invalid value for `jumbo_packet` ({0}), must be one of {1}"  # noqa: E501
                .format(jumbo_packet, allowed_values)
            )

        self._jumbo_packet = jumbo_packet

    @property
    def network_direct(self):
        """Gets the network_direct of this IntentSpecAdapterPropertyOverrides.  # noqa: E501

        Supported values are Enabled and Disabled. Default is Enabled.  # noqa: E501

        :return: The network_direct of this IntentSpecAdapterPropertyOverrides.  # noqa: E501
        :rtype: str
        """
        return self._network_direct

    @network_direct.setter
    def network_direct(self, network_direct):
        """Sets the network_direct of this IntentSpecAdapterPropertyOverrides.

        Supported values are Enabled and Disabled. Default is Enabled.  # noqa: E501

        :param network_direct: The network_direct of this IntentSpecAdapterPropertyOverrides.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLED", "DISABLED"]  # noqa: E501
        if network_direct not in allowed_values:
            raise ValueError(
                "Invalid value for `network_direct` ({0}), must be one of {1}"  # noqa: E501
                .format(network_direct, allowed_values)
            )

        self._network_direct = network_direct

    @property
    def network_direct_technology(self):
        """Gets the network_direct_technology of this IntentSpecAdapterPropertyOverrides.  # noqa: E501

        This value must match the RDMA flavour being used in the environment. Supported values are IWARP and ROCEV2.  # noqa: E501

        :return: The network_direct_technology of this IntentSpecAdapterPropertyOverrides.  # noqa: E501
        :rtype: str
        """
        return self._network_direct_technology

    @network_direct_technology.setter
    def network_direct_technology(self, network_direct_technology):
        """Sets the network_direct_technology of this IntentSpecAdapterPropertyOverrides.

        This value must match the RDMA flavour being used in the environment. Supported values are IWARP and ROCEV2.  # noqa: E501

        :param network_direct_technology: The network_direct_technology of this IntentSpecAdapterPropertyOverrides.  # noqa: E501
        :type: str
        """
        allowed_values = ["IWARP", "ROCEV2"]  # noqa: E501
        if network_direct_technology not in allowed_values:
            raise ValueError(
                "Invalid value for `network_direct_technology` ({0}), must be one of {1}"  # noqa: E501
                .format(network_direct_technology, allowed_values)
            )

        self._network_direct_technology = network_direct_technology

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IntentSpecAdapterPropertyOverrides, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IntentSpecAdapterPropertyOverrides):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
