# coding: utf-8

"""
    Dell APEX Cloud Platform for Microsoft Azure REST API

    Dell APEX Cloud Platform REST API provides a programmatic interface for performing administrative tasks on Dell APEX Cloud Platform for Microsoft Azure. The data is available in JSON format.  # noqa: E501

    OpenAPI spec version: 1.0.000
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IntentSpecQosPolicyOverrides(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'priority_value8021_action_cluster': 'str',
        'priority_value8021_action_smb': 'str',
        'bandwidth_percentage_smb': 'str'
    }

    attribute_map = {
        'priority_value8021_action_cluster': 'priority_value8021_action_cluster',
        'priority_value8021_action_smb': 'priority_value8021_action_smb',
        'bandwidth_percentage_smb': 'bandwidth_percentage_smb'
    }

    def __init__(self, priority_value8021_action_cluster=None, priority_value8021_action_smb=None, bandwidth_percentage_smb=None):  # noqa: E501
        """IntentSpecQosPolicyOverrides - a model defined in Swagger"""  # noqa: E501
        self._priority_value8021_action_cluster = None
        self._priority_value8021_action_smb = None
        self._bandwidth_percentage_smb = None
        self.discriminator = None
        if priority_value8021_action_cluster is not None:
            self.priority_value8021_action_cluster = priority_value8021_action_cluster
        if priority_value8021_action_smb is not None:
            self.priority_value8021_action_smb = priority_value8021_action_smb
        if bandwidth_percentage_smb is not None:
            self.bandwidth_percentage_smb = bandwidth_percentage_smb

    @property
    def priority_value8021_action_cluster(self):
        """Gets the priority_value8021_action_cluster of this IntentSpecQosPolicyOverrides.  # noqa: E501

        Cluster Heartbeat traffic prioritization. By defatult it will reserve 2% bandwidth if network adapters are <=10Gbps and 1% bandwidth if network adapters are > 10Gbps. Supported values are 5, 6 and 7.  # noqa: E501

        :return: The priority_value8021_action_cluster of this IntentSpecQosPolicyOverrides.  # noqa: E501
        :rtype: str
        """
        return self._priority_value8021_action_cluster

    @priority_value8021_action_cluster.setter
    def priority_value8021_action_cluster(self, priority_value8021_action_cluster):
        """Sets the priority_value8021_action_cluster of this IntentSpecQosPolicyOverrides.

        Cluster Heartbeat traffic prioritization. By defatult it will reserve 2% bandwidth if network adapters are <=10Gbps and 1% bandwidth if network adapters are > 10Gbps. Supported values are 5, 6 and 7.  # noqa: E501

        :param priority_value8021_action_cluster: The priority_value8021_action_cluster of this IntentSpecQosPolicyOverrides.  # noqa: E501
        :type: str
        """
        allowed_values = ["5", "6", "7"]  # noqa: E501
        if priority_value8021_action_cluster not in allowed_values:
            raise ValueError(
                "Invalid value for `priority_value8021_action_cluster` ({0}), must be one of {1}"  # noqa: E501
                .format(priority_value8021_action_cluster, allowed_values)
            )

        self._priority_value8021_action_cluster = priority_value8021_action_cluster

    @property
    def priority_value8021_action_smb(self):
        """Gets the priority_value8021_action_smb of this IntentSpecQosPolicyOverrides.  # noqa: E501

        RDMA Storage Traffic prioritization. Supported values are 3 and 4.  # noqa: E501

        :return: The priority_value8021_action_smb of this IntentSpecQosPolicyOverrides.  # noqa: E501
        :rtype: str
        """
        return self._priority_value8021_action_smb

    @priority_value8021_action_smb.setter
    def priority_value8021_action_smb(self, priority_value8021_action_smb):
        """Sets the priority_value8021_action_smb of this IntentSpecQosPolicyOverrides.

        RDMA Storage Traffic prioritization. Supported values are 3 and 4.  # noqa: E501

        :param priority_value8021_action_smb: The priority_value8021_action_smb of this IntentSpecQosPolicyOverrides.  # noqa: E501
        :type: str
        """
        allowed_values = ["3", "4"]  # noqa: E501
        if priority_value8021_action_smb not in allowed_values:
            raise ValueError(
                "Invalid value for `priority_value8021_action_smb` ({0}), must be one of {1}"  # noqa: E501
                .format(priority_value8021_action_smb, allowed_values)
            )

        self._priority_value8021_action_smb = priority_value8021_action_smb

    @property
    def bandwidth_percentage_smb(self):
        """Gets the bandwidth_percentage_smb of this IntentSpecQosPolicyOverrides.  # noqa: E501

        RDMA Storage Traffic bandwidth reservation. Supported values are 0 to 100.  # noqa: E501

        :return: The bandwidth_percentage_smb of this IntentSpecQosPolicyOverrides.  # noqa: E501
        :rtype: str
        """
        return self._bandwidth_percentage_smb

    @bandwidth_percentage_smb.setter
    def bandwidth_percentage_smb(self, bandwidth_percentage_smb):
        """Sets the bandwidth_percentage_smb of this IntentSpecQosPolicyOverrides.

        RDMA Storage Traffic bandwidth reservation. Supported values are 0 to 100.  # noqa: E501

        :param bandwidth_percentage_smb: The bandwidth_percentage_smb of this IntentSpecQosPolicyOverrides.  # noqa: E501
        :type: str
        """

        self._bandwidth_percentage_smb = bandwidth_percentage_smb

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IntentSpecQosPolicyOverrides, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IntentSpecQosPolicyOverrides):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
