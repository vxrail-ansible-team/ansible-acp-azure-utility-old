# coding: utf-8

"""
    Dell APEX Cloud Platform for Microsoft Azure REST API

    Dell APEX Cloud Platform REST API provides a programmatic interface for performing administrative tasks on Dell APEX Cloud Platform for Microsoft Azure. The data is available in JSON format.  # noqa: E501

    OpenAPI spec version: 1.0.000
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ACPAzureSystemInitSpecGlobal(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'eu_location': 'bool',
        'episodic_data_upload': 'bool',
        'streaming_data_client': 'bool',
        'storage': 'ACPAzureSystemInitSpecGlobalStorage',
        'cluster': 'ACPAzureSystemInitSpecGlobalCluster',
        'dns_server': 'list[str]'
    }

    attribute_map = {
        'eu_location': 'eu_location',
        'episodic_data_upload': 'episodic_data_upload',
        'streaming_data_client': 'streaming_data_client',
        'storage': 'storage',
        'cluster': 'cluster',
        'dns_server': 'dns_server'
    }

    def __init__(self, eu_location=None, episodic_data_upload=None, streaming_data_client=None, storage=None, cluster=None, dns_server=None):  # noqa: E501
        """ACPAzureSystemInitSpecGlobal - a model defined in Swagger"""  # noqa: E501
        self._eu_location = None
        self._episodic_data_upload = None
        self._streaming_data_client = None
        self._storage = None
        self._cluster = None
        self._dns_server = None
        self.discriminator = None
        if eu_location is not None:
            self.eu_location = eu_location
        if episodic_data_upload is not None:
            self.episodic_data_upload = episodic_data_upload
        if streaming_data_client is not None:
            self.streaming_data_client = streaming_data_client
        if storage is not None:
            self.storage = storage
        if cluster is not None:
            self.cluster = cluster
        if dns_server is not None:
            self.dns_server = dns_server

    @property
    def eu_location(self):
        """Gets the eu_location of this ACPAzureSystemInitSpecGlobal.  # noqa: E501

        Location of your cluster. The log and diagnostic data is sent to the appropriate diagnostics servers depending upon where your cluster resides. Setting this to false will result in all data sent to Microsoft to be stored outside of EU.  # noqa: E501

        :return: The eu_location of this ACPAzureSystemInitSpecGlobal.  # noqa: E501
        :rtype: bool
        """
        return self._eu_location

    @eu_location.setter
    def eu_location(self, eu_location):
        """Sets the eu_location of this ACPAzureSystemInitSpecGlobal.

        Location of your cluster. The log and diagnostic data is sent to the appropriate diagnostics servers depending upon where your cluster resides. Setting this to false will result in all data sent to Microsoft to be stored outside of EU.  # noqa: E501

        :param eu_location: The eu_location of this ACPAzureSystemInitSpecGlobal.  # noqa: E501
        :type: bool
        """

        self._eu_location = eu_location

    @property
    def episodic_data_upload(self):
        """Gets the episodic_data_upload of this ACPAzureSystemInitSpecGlobal.  # noqa: E501

        When set to True, the logs are collected to facilitate quicker issue resolution.  # noqa: E501

        :return: The episodic_data_upload of this ACPAzureSystemInitSpecGlobal.  # noqa: E501
        :rtype: bool
        """
        return self._episodic_data_upload

    @episodic_data_upload.setter
    def episodic_data_upload(self, episodic_data_upload):
        """Sets the episodic_data_upload of this ACPAzureSystemInitSpecGlobal.

        When set to True, the logs are collected to facilitate quicker issue resolution.  # noqa: E501

        :param episodic_data_upload: The episodic_data_upload of this ACPAzureSystemInitSpecGlobal.  # noqa: E501
        :type: bool
        """

        self._episodic_data_upload = episodic_data_upload

    @property
    def streaming_data_client(self):
        """Gets the streaming_data_client of this ACPAzureSystemInitSpecGlobal.  # noqa: E501

        Turn on or off to determine if the telemetry data is to be sent to Microsoft.  # noqa: E501

        :return: The streaming_data_client of this ACPAzureSystemInitSpecGlobal.  # noqa: E501
        :rtype: bool
        """
        return self._streaming_data_client

    @streaming_data_client.setter
    def streaming_data_client(self, streaming_data_client):
        """Sets the streaming_data_client of this ACPAzureSystemInitSpecGlobal.

        Turn on or off to determine if the telemetry data is to be sent to Microsoft.  # noqa: E501

        :param streaming_data_client: The streaming_data_client of this ACPAzureSystemInitSpecGlobal.  # noqa: E501
        :type: bool
        """

        self._streaming_data_client = streaming_data_client

    @property
    def storage(self):
        """Gets the storage of this ACPAzureSystemInitSpecGlobal.  # noqa: E501


        :return: The storage of this ACPAzureSystemInitSpecGlobal.  # noqa: E501
        :rtype: ACPAzureSystemInitSpecGlobalStorage
        """
        return self._storage

    @storage.setter
    def storage(self, storage):
        """Sets the storage of this ACPAzureSystemInitSpecGlobal.


        :param storage: The storage of this ACPAzureSystemInitSpecGlobal.  # noqa: E501
        :type: ACPAzureSystemInitSpecGlobalStorage
        """

        self._storage = storage

    @property
    def cluster(self):
        """Gets the cluster of this ACPAzureSystemInitSpecGlobal.  # noqa: E501


        :return: The cluster of this ACPAzureSystemInitSpecGlobal.  # noqa: E501
        :rtype: ACPAzureSystemInitSpecGlobalCluster
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this ACPAzureSystemInitSpecGlobal.


        :param cluster: The cluster of this ACPAzureSystemInitSpecGlobal.  # noqa: E501
        :type: ACPAzureSystemInitSpecGlobalCluster
        """

        self._cluster = cluster

    @property
    def dns_server(self):
        """Gets the dns_server of this ACPAzureSystemInitSpecGlobal.  # noqa: E501

        Array of IPv4 addresses for the DNS servers  # noqa: E501

        :return: The dns_server of this ACPAzureSystemInitSpecGlobal.  # noqa: E501
        :rtype: list[str]
        """
        return self._dns_server

    @dns_server.setter
    def dns_server(self, dns_server):
        """Sets the dns_server of this ACPAzureSystemInitSpecGlobal.

        Array of IPv4 addresses for the DNS servers  # noqa: E501

        :param dns_server: The dns_server of this ACPAzureSystemInitSpecGlobal.  # noqa: E501
        :type: list[str]
        """

        self._dns_server = dns_server

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ACPAzureSystemInitSpecGlobal, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ACPAzureSystemInitSpecGlobal):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
