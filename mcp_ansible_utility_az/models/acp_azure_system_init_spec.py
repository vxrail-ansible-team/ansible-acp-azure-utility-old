# coding: utf-8

"""
    Dell APEX Cloud Platform for Microsoft Azure REST API

    Dell APEX Cloud Platform REST API provides a programmatic interface for performing administrative tasks on Dell APEX Cloud Platform for Microsoft Azure. The data is available in JSON format.  # noqa: E501

    OpenAPI spec version: 1.0.000
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ACPAzureSystemInitSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'version': 'str',
        'ad_domain': 'ACPAzureSystemInitSpecAdDomain',
        'ldaps': 'ACPAzureSystemInitSpecLdaps',
        '_global': 'ACPAzureSystemInitSpecGlobal',
        'azure_portal': 'ACPAzureSystemInitSpecAzurePortal',
        'hosts': 'list[ACPAzureSystemInitSpecHosts]',
        'witness': 'ACPAzureSystemInitSpecWitness',
        'wac': 'ACPAzureSystemInitSpecWac',
        'cloud_platform_manager': 'ACPAzureSystemInitSpecCloudPlatformManager',
        'network': 'ACPAzureSystemInitSpecNetwork'
    }

    attribute_map = {
        'version': 'version',
        'ad_domain': 'ad_domain',
        'ldaps': 'ldaps',
        '_global': 'global',
        'azure_portal': 'azure_portal',
        'hosts': 'hosts',
        'witness': 'witness',
        'wac': 'wac',
        'cloud_platform_manager': 'cloud_platform_manager',
        'network': 'network'
    }

    def __init__(self, version=None, ad_domain=None, ldaps=None, _global=None, azure_portal=None, hosts=None, witness=None, wac=None, cloud_platform_manager=None, network=None):  # noqa: E501
        """ACPAzureSystemInitSpec - a model defined in Swagger"""  # noqa: E501
        self._version = None
        self._ad_domain = None
        self._ldaps = None
        self.__global = None
        self._azure_portal = None
        self._hosts = None
        self._witness = None
        self._wac = None
        self._cloud_platform_manager = None
        self._network = None
        self.discriminator = None
        self.version = version
        self.ad_domain = ad_domain
        self.ldaps = ldaps
        self._global = _global
        self.azure_portal = azure_portal
        self.hosts = hosts
        if witness is not None:
            self.witness = witness
        if wac is not None:
            self.wac = wac
        self.cloud_platform_manager = cloud_platform_manager
        self.network = network

    @property
    def version(self):
        """Gets the version of this ACPAzureSystemInitSpec.  # noqa: E501

        The version of APEX Cloud Platform Manager.  # noqa: E501

        :return: The version of this ACPAzureSystemInitSpec.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ACPAzureSystemInitSpec.

        The version of APEX Cloud Platform Manager.  # noqa: E501

        :param version: The version of this ACPAzureSystemInitSpec.  # noqa: E501
        :type: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def ad_domain(self):
        """Gets the ad_domain of this ACPAzureSystemInitSpec.  # noqa: E501


        :return: The ad_domain of this ACPAzureSystemInitSpec.  # noqa: E501
        :rtype: ACPAzureSystemInitSpecAdDomain
        """
        return self._ad_domain

    @ad_domain.setter
    def ad_domain(self, ad_domain):
        """Sets the ad_domain of this ACPAzureSystemInitSpec.


        :param ad_domain: The ad_domain of this ACPAzureSystemInitSpec.  # noqa: E501
        :type: ACPAzureSystemInitSpecAdDomain
        """
        if ad_domain is None:
            raise ValueError("Invalid value for `ad_domain`, must not be `None`")  # noqa: E501

        self._ad_domain = ad_domain

    @property
    def ldaps(self):
        """Gets the ldaps of this ACPAzureSystemInitSpec.  # noqa: E501


        :return: The ldaps of this ACPAzureSystemInitSpec.  # noqa: E501
        :rtype: ACPAzureSystemInitSpecLdaps
        """
        return self._ldaps

    @ldaps.setter
    def ldaps(self, ldaps):
        """Sets the ldaps of this ACPAzureSystemInitSpec.


        :param ldaps: The ldaps of this ACPAzureSystemInitSpec.  # noqa: E501
        :type: ACPAzureSystemInitSpecLdaps
        """
        if ldaps is None:
            raise ValueError("Invalid value for `ldaps`, must not be `None`")  # noqa: E501

        self._ldaps = ldaps

    @property
    def _global(self):
        """Gets the _global of this ACPAzureSystemInitSpec.  # noqa: E501


        :return: The _global of this ACPAzureSystemInitSpec.  # noqa: E501
        :rtype: ACPAzureSystemInitSpecGlobal
        """
        return self.__global

    @_global.setter
    def _global(self, _global):
        """Sets the _global of this ACPAzureSystemInitSpec.


        :param _global: The _global of this ACPAzureSystemInitSpec.  # noqa: E501
        :type: ACPAzureSystemInitSpecGlobal
        """
        if _global is None:
            raise ValueError("Invalid value for `_global`, must not be `None`")  # noqa: E501

        self.__global = _global

    @property
    def azure_portal(self):
        """Gets the azure_portal of this ACPAzureSystemInitSpec.  # noqa: E501


        :return: The azure_portal of this ACPAzureSystemInitSpec.  # noqa: E501
        :rtype: ACPAzureSystemInitSpecAzurePortal
        """
        return self._azure_portal

    @azure_portal.setter
    def azure_portal(self, azure_portal):
        """Sets the azure_portal of this ACPAzureSystemInitSpec.


        :param azure_portal: The azure_portal of this ACPAzureSystemInitSpec.  # noqa: E501
        :type: ACPAzureSystemInitSpecAzurePortal
        """
        if azure_portal is None:
            raise ValueError("Invalid value for `azure_portal`, must not be `None`")  # noqa: E501

        self._azure_portal = azure_portal

    @property
    def hosts(self):
        """Gets the hosts of this ACPAzureSystemInitSpec.  # noqa: E501

        Configuration settings for each of the hosts to be added into the cluster.  # noqa: E501

        :return: The hosts of this ACPAzureSystemInitSpec.  # noqa: E501
        :rtype: list[ACPAzureSystemInitSpecHosts]
        """
        return self._hosts

    @hosts.setter
    def hosts(self, hosts):
        """Sets the hosts of this ACPAzureSystemInitSpec.

        Configuration settings for each of the hosts to be added into the cluster.  # noqa: E501

        :param hosts: The hosts of this ACPAzureSystemInitSpec.  # noqa: E501
        :type: list[ACPAzureSystemInitSpecHosts]
        """
        if hosts is None:
            raise ValueError("Invalid value for `hosts`, must not be `None`")  # noqa: E501

        self._hosts = hosts

    @property
    def witness(self):
        """Gets the witness of this ACPAzureSystemInitSpec.  # noqa: E501


        :return: The witness of this ACPAzureSystemInitSpec.  # noqa: E501
        :rtype: ACPAzureSystemInitSpecWitness
        """
        return self._witness

    @witness.setter
    def witness(self, witness):
        """Sets the witness of this ACPAzureSystemInitSpec.


        :param witness: The witness of this ACPAzureSystemInitSpec.  # noqa: E501
        :type: ACPAzureSystemInitSpecWitness
        """

        self._witness = witness

    @property
    def wac(self):
        """Gets the wac of this ACPAzureSystemInitSpec.  # noqa: E501


        :return: The wac of this ACPAzureSystemInitSpec.  # noqa: E501
        :rtype: ACPAzureSystemInitSpecWac
        """
        return self._wac

    @wac.setter
    def wac(self, wac):
        """Sets the wac of this ACPAzureSystemInitSpec.


        :param wac: The wac of this ACPAzureSystemInitSpec.  # noqa: E501
        :type: ACPAzureSystemInitSpecWac
        """

        self._wac = wac

    @property
    def cloud_platform_manager(self):
        """Gets the cloud_platform_manager of this ACPAzureSystemInitSpec.  # noqa: E501


        :return: The cloud_platform_manager of this ACPAzureSystemInitSpec.  # noqa: E501
        :rtype: ACPAzureSystemInitSpecCloudPlatformManager
        """
        return self._cloud_platform_manager

    @cloud_platform_manager.setter
    def cloud_platform_manager(self, cloud_platform_manager):
        """Sets the cloud_platform_manager of this ACPAzureSystemInitSpec.


        :param cloud_platform_manager: The cloud_platform_manager of this ACPAzureSystemInitSpec.  # noqa: E501
        :type: ACPAzureSystemInitSpecCloudPlatformManager
        """
        if cloud_platform_manager is None:
            raise ValueError("Invalid value for `cloud_platform_manager`, must not be `None`")  # noqa: E501

        self._cloud_platform_manager = cloud_platform_manager

    @property
    def network(self):
        """Gets the network of this ACPAzureSystemInitSpec.  # noqa: E501


        :return: The network of this ACPAzureSystemInitSpec.  # noqa: E501
        :rtype: ACPAzureSystemInitSpecNetwork
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this ACPAzureSystemInitSpec.


        :param network: The network of this ACPAzureSystemInitSpec.  # noqa: E501
        :type: ACPAzureSystemInitSpecNetwork
        """
        if network is None:
            raise ValueError("Invalid value for `network`, must not be `None`")  # noqa: E501

        self._network = network

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ACPAzureSystemInitSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ACPAzureSystemInitSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
